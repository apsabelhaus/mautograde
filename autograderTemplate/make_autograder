#!/usr/bin/env bash

# Run this script to generate the file AUTOGRADER_ZIP, in a non-public directory, for upload to Gradescope.
AUTOGRADER_ZIP=autograder.zip

# Usage:
# make_autograder -r user/gradertestsrepo.git -k /path/to/private/key -a assignment_subdir
# Notes:
#   Run this file from the directory where you would like the autograder .zip file to be generated.
#   This directory must be private (or non-version-controlled). A recommendation is to add the template to your path
# Arguments:
#   -r user/gradertestsrepo.git == your private repository containing your mAutograder tests
#   -k /path/to/private/key == local path to the private deploy key that corresponds with user/gradertestsrepo.git
#   -a assignment_subdir == subdirectory in the user/gradertestsrepo.git that contains this assignment's tests. Eventually, mautogradeSuiteRunTests will be executed with this subfolder as the argument.
# Example usage:
#   make_autograder -r apsabelhaus/mautogradeexampletests_tron.git -k ~/.ssh/id_rsa_deploy_key

# we now force the user to supply both arguments
if [[ -z "$1" ]] ; then
    echo "WARNING - No argument supplied, you must include -r, -k, and -t."
    exit 1
fi

# many thanks to https://unix.stackexchange.com/questions/129391/passing-named-arguments-to-shell-scripts
while getopts "r:k:a:" opt; do
    case $opt in
        r) test_repo_remote_path="$OPTARG"
        ;;
        k) deploy_key_path="$OPTARG"
        ;;
        a) assignment_subdir="$OPTARG"
        ;;
        \?) echo "Invalid option -$OPTARG" >&2
        exit 1
        ;;
    esac
done

# confirming arguments to the user
deploy_key_filename="${deploy_key_path##*/}"
echo "Including the deploy key file $deploy_key_path as $deploy_key_filename"
echo "Test repository set to $test_repo_remote_path"
echo "Assignment subdirectory will be $test_repo_remote_path/$assignment_subdir"

# Copy all files from the directory of this script to the current working directory
# including the deploy key
cp $deploy_key_path .
# thanks to https://stackoverflow.com/questions/59895/how-do-i-get-the-directory-where-a-bash-script-is-located-from-within-the-script
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
declare -a files_for_zip=("run_autograder"
                          "setup*.sh"
                          "ssh_config_template"
                        )

# Note: Roberto's setup also includes cvx_compile_all.m *.patch

# also unroll the files into one string for using zip
zipfiles=""
for i in "${files_for_zip[@]}"
do
    #echo "$SCRIPT_DIR/$i"
    cp $SCRIPT_DIR/$i .
    zipfiles="$zipfiles $i "
done

echo "Copying these files here for patching and inclusion into the autograder.zip:"
echo $zipfiles

# patch the variables with our arguments
echo "Patching setup_variables.sh with user/gradertestsrepo.git as $test_repo_remote_path"
sed -i -e "s#user/gradertestsrepo.git#$test_repo_remote_path#g" setup_variables.sh
echo "Patching setup_variables.sh with id_rsa_deploy_key as $deploy_key_filename"
sed -i -e "s#id_rsa_deploy_key#$deploy_key_filename#g" setup_variables.sh
echo "Patching ssh_config_template with id_rsa_deploy_key as $deploy_key_filename"
sed -i -e "s#id_rsa_deploy_key#$deploy_key_filename#g" ssh_config_template
echo "Patching setup_variables.sh with assignment_subdir as $assignment_subdir"
sed -i -e "s#assignment_subdir#$assignment_subdir#g" setup_variables.sh

if [ -f "$AUTOGRADER_ZIP" ]; then
    rm "$AUTOGRADER_ZIP"
fi

# If we're using the optional additional test python hook, add it to the archive too

# finally generate the archive to upload to Gradescope
zip -r "$AUTOGRADER_ZIP" $zipfiles "mautograder_additional_tests.py" $deploy_key_filename

# we should source the new patched file and check
source ./setup_variables.sh
echo $0: Current value for MAUTOGRADE_TESTS_DIR is $MAUTOGRADE_TESTS_DIR
