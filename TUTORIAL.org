* Tutorial for creating and setting up autograders from a private Git repository
** Cloning ~mAutograde~ and the example tests
This tutorial will use three repositories.
1) :: The main test harness to run and debug tests, and to setup the Gradescope programming assignment.
2) :: The tests that will be run by Gradescope.
3) :: A solution to the assignment, which will double also as a submission to test the autograder.
Clone the three repositories into the same directory. Your directory should look as follows
#+begin_export ascii
- tutorials
  - mAutograde
  - mAutogradeExampleSolution
  - mAutogradeExampleTests
end_export
The following steps will go over the steps you will need to perform when starting a new submission from scratch. The repositories above already implement these steps, and you will be able to simply follow along.

** Create the solution to the assignment
While it is possible to create a new assignment without having a working solution, this is, naturally, not recommended. For this tutorial, we assume that we have a working submission with three functions:
- ~function1.m~ :: Returns the sum of the elements in the second input plus the first input plus 3.
- ~function2.m~ :: Splits a list according to a pivot.
- ~function3.m~ :: Compute the sum of two values, a string representation of the sum, and checks if the sum is greater than zero.
The functions are rather trivial, and are mostly used as a pretext for illustrating how to write the tests.

** Create the tests for the solution
Conventionally, each function will have a /test suite/ contained in a file with name ~⟨nameOfFunction⟩_autoTest.m~. Note that the ~_autoTest.m~ suffix is mandatory, ~mAutograde~ will *not consider as tests* files without this suffix (this is useful to include extra code that is necessary to create more complex tests, but does not constitute a test suite).
See the file ~WRITING_TESTS.org~ and the test suites included in the ~mAutogradeExampleTests~ repository for details on how to write the tests, including standard tests running the built-in ~mAutograde~ hinter, an testing for the size and type of the outputs.

** Setting up the path
Add the directories for ~mAutograde~ and the tests to the Matlab path, e.g.:
#+begin_src matlab
  cd tutorial/mAutograde
  addpath(pwd)
  cd ../mAutogradeExampleTests/
  addpath(pwd)
#+end_src
** [optional] Create random test data
~mAutograde~ provides facilities to
a) Create random inputs for the functions;
b) Run the inputs through the solution to get expected outputs;
c) Specify how to compare the expected outputs with the actual outputs produced by a Gradescope submission;
d) Save all the information above in a file to include in the tests.
Detailed information on this process is given in the example files ~function1_autoTestData.m~, ~function2_autoTestData.m~, ~function3_autoTestData.m~.
Run the three files to create the test datasets.
A couple of notes:
- Each file will save a ~.mat~ file (same name, different extension) in the sibling directory ~mAutogradeExampleTests~ which contains the actual tests.
- It will also modify the MAX_SCORE_BEFORE_NORMALIZATION option to match the number of input/output pairs generated by the tests.
  ⚠ Currently the code modifies the MAX_SCORE_BEFORE_NORMALIZATION option for *all* tests, including ~hinter~, ~types~, and ~dimensions~; this is incorrect and is on the TODO list of fixes.
- Running the data creation file will suggest also the command to run the corresponding test suite locally (see below).
** Run the tests locally
It is a good idea to run the test locally against the solution. Change directory to the submission, and then run the tests.
#+begin_src matlab
  cd ../mAutogradeExampleSolution
  mautogradeSuiteRunTests('function1_autoTest.m','quickReport')
  mautogradeSuiteRunTests('function2_autoTest.m','quickReport')
  mautogradeSuiteRunTests('function3_autoTest.m','quickReport')
#+end_src
The ~quickReport~ option shows the results of the tests in a more readable manner. By default, the function ~mautogradeSuiteRunTests~ will produce the YAML file that Gradescope needs to read the results.
Check that all the tests return the expected scores (if the ~MAX_SCORE~ or ~MAX_SCORE_BEFORE_NORMALIZATION~ options are not set correctly, the tests might return scores that are below/above the expected ones; ~mAutograde~ will give a warning in the latter case, but it will not stop the tests).
** Prepare the Gradescope assignment
There are a few steps in order to bring the autograders to Gradescope.
*** Move the test files to a *private* Git repository
Push all the files for the tests to a repository on BitBucket or GitHub (for the tutorial, this step has already been done).
The repository should be private, so that students do not have access to the tests
*** Obtain a /deploy key/
If the repository is private, Gradescope will not be able to clone it by default. To solve this problem, generate a /deploy key/ file called ~id_rsa_deploy_key~, upload it to BitBucket (https://bitbucket.org/blog/deployment-keys) or GitHub (https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys), and copy it into the ~mAutograde/autograderTemplate~ directory. With this key, Gradescope will be able to securely pull from the repository (i.e., it will have only read-only access).
The ~id_rsa_deploy_key~ in the repository corresponds to the ~mAutogradeExampleTest~ repository.
*** Configure the assignment files for Gradescope and create the zip archive
Edit the file ~mAutograde/autograderTemplate/setup_variables.sh~, and in particular the following variables:
- ~GIT_HOST~ :: Either ~bitbucket.org~ or ~github.com~, depending on the provider used.
- ~GIT_REPO~ :: The SSH url of the repository for the tests. The deployment key should correspond to this repository.
- ~MAUTOGRADE_TESTS_DIR~ :: The subdirectory in the repository with the tests to use. This allows to have a single repository (and a single deploy key) for multiple assignments.
Compress all the files from ~mAutograde/autograderTemplate~ into an archive called ~archive.zip~, or run the ~make_autograder~ script which will perform this step for you (requires the ~bash~ interpreter).
*** Create and test the Gradescope programming assigment
Create a new programming assigment on Gradescope using the ~archive.zip~ file created at the previous step. After Gradescope create the image, use the "Test autograder" link to upload the reference solution and check that the tests work as expected.

* TODO
Pointed test for corner cases
Test for invariance for function2
